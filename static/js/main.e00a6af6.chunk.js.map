{"version":3,"sources":["components/topbar.js","components/gametile.js","components/gameboard.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","navStyle","display","justifyContent","padding","fontSize","backgroundColor","color","state","react_default","a","createElement","style","score","topScore","Component","GameTile","num","_this2","width","src","concat","alt","onClick","handleClick","GameBoard","listStyle","gridTemplateColumns","gridGap","clickTile","chosen","indexOf","tempArr","push","console","log","setState","message","updateScore","resetScore","randomizeArray","icons","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","margin","textAlign","map","gametile_GameTile","key","App","newTop","newScore","className","topbar_TopBar","gameboard_GameBoard","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e00a6af6.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class TopBar extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n    }\r\n  }\r\n  navStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'space-around',\r\n    padding: '10px',\r\n    fontSize: '3em',\r\n    backgroundColor: 'purple',\r\n    color: 'white'\r\n  }\r\n\r\n  render(){\r\n    return(<nav style={this.navStyle}><span>Score: {this.props.score}</span><span>Heroes Guessing Game</span><span>Top Score: {this.props.topScore}</span></nav>)\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class GameTile extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      num: this.props.num\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <li>\r\n        <img style={{width: '100%'}} src={`./images/${this.props.num}.png`} alt={this.props.num} onClick={() => this.props.handleClick(this.props.num)}/>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport GameTile from './gametile.js'\r\n\r\nexport default class GameBoard extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      icons: [1,2,3,4,5,6,7,8,9,10,11,12],\r\n      chosen: [],\r\n      message: 'Click any tile to start!'\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.randomizeArray()\r\n  }\r\n\r\n  listStyle = {\r\n    listStyle: 'none',\r\n    display: 'grid',\r\n    gridTemplateColumns: 'repeat(4,1fr)',\r\n    gridGap: '1em',\r\n    padding: '0'\r\n  }\r\n\r\n  clickTile = (num) => {\r\n    if(this.state.chosen.indexOf(num) === -1){\r\n      let tempArr = this.state.chosen\r\n      tempArr.push(num)\r\n      console.log(num)\r\n      console.log(tempArr)\r\n      this.setState({\r\n        chosen: tempArr,\r\n        message: 'Good Luck!'\r\n      })\r\n      this.props.updateScore()\r\n    } else {\r\n      this.props.resetScore()\r\n      this.setState({\r\n        chosen: [],\r\n        message: 'Wrong guess, better luck next time! Click a tile to start again!'\r\n      })\r\n    }\r\n    this.randomizeArray()\r\n  }\r\n\r\n  shuffle(array) {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  randomizeArray(){\r\n    let tempArr = this.state.icons\r\n    this.shuffle(tempArr)\r\n    this.setState({icons: tempArr})\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div style={{width: '1200px', margin: '0 auto'}}>\r\n        <p style={{width: '100%', textAlign: 'center', fontSize: '2.5em'}}>{this.state.message}</p>\r\n        <ul style={this.listStyle}>\r\n          {this.state.icons.map(num=><GameTile style={{display: 'block', margin: '0 auto'}} key={num} num={num} handleClick={this.clickTile}/>)}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, {Component} from 'react';\nimport TopBar from './components/topbar.js'\nimport GameBoard from './components/gameboard.js'\n\nexport default class App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      score: 0,\n      topScore: 0\n    }\n  }\n  updateScore = () => {\n    let newScore = this.state.score + 1\n    let newTop\n    if(newScore > this.state.topScore){\n      newTop = newScore\n    } else {\n      newTop = this.state.topScore\n    }\n    this.setState({\n      score: newScore,\n      topScore: newTop\n    })\n  }\n  resetScore = () => {\n    this.setState({\n      score: 0\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <TopBar score={this.state.score} topScore={this.state.topScore} />\n        <GameBoard updateScore={this.updateScore} resetScore={this.resetScore} message={this.state.message} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}